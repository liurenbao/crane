---
# Deploy
## ********************************************************************************************************************************
# Check kubernetes image
- name: Check kubernetes image
  shell: 'for i in k8s.gcr.io/kube-proxy:{{ k8s_version }} k8s.gcr.io/kube-apiserver-amd64:{{ k8s_version }} k8s.gcr.io/kube-controller-manager:{{ k8s_version }} k8s.gcr.io/kube-scheduler:{{ k8s_version }} haproxy calico/node:{{ calico_version }} calico/cni:{{ calico_version }} calico/kube-controllers:{{ calico_version }} coredns/coredns:{{ dns_version }} k8s.gcr.io/etcd:{{ etcd_version }} k8s.gcr.io/pause:{{ pause_version }} slzcc/keepalived; do if [ ! `docker images --filter=reference="$i*" -aq | wc -l` -ge 1 ] ;then echo 1 > /dev/stderr && exit 1 ; fi ; done'
  register: check_k8s_image
  ignore_errors: true

- name: Check Binary files
  shell: 'for i in cfssl cfssljson kubelet kubectl; do if [ "`ls {{ kubernetes_ctl_path }}$i | wc -l`" -eq 0 ] ; then echo 1 > /dev/stderr && exit 1; fi ; done'
  register: check_binary_files
  ignore_errors: true

- name: Check Kubectl Version
  shell: "{{ kubernetes_ctl_path }}kubectl version --short=true --client=true | awk '{print $3}'"
  register: check_kubectl_version
  ignore_errors: true

- name: Pull the Image
  shell: "docker rm -f import-kubernetes-temporary | true && docker run --name import-kubernetes-temporary -d -v /var/run/docker.sock:/var/run/docker.sock:ro {{ k8s_image_deploy_repo }}:{{ k8s_version }}.{{ build_k8s_version }} sleep 1234567"
  when: (check_kubectl_version.stdout != k8s_version) or (check_k8s_image is failed) or (check_binary_files is failed)

- name: Export the Image
  shell: 'until docker exec -i import-kubernetes-temporary bash /docker-image-import.sh ; do >&2 echo "Starting..." && sleep 1 ; done'
  when: check_k8s_image is failed

- name: Export the cfssl
  shell: "docker cp import-kubernetes-temporary:/cfssl {{ kubernetes_ctl_path }}"
  when: check_binary_files is failed

- name: Export the cfssljson
  shell: "docker cp import-kubernetes-temporary:/cfssljson {{ kubernetes_ctl_path }}"
  when: check_binary_files is failed

- name: Export the Kubelet
  shell: "docker cp import-kubernetes-temporary:/kubernetes/node/bin/kubelet {{ kubernetes_ctl_path }}"
  when: check_kubectl_version.stdout != k8s_version

- name: Export the Kubectl
  shell: "docker cp import-kubernetes-temporary:/kubernetes/node/bin/kubectl {{ kubernetes_ctl_path }}"
  when: check_kubectl_version.stdout != k8s_version

- name: Export the CNI
  shell: "docker cp import-kubernetes-temporary:/cni/. {{ kubernetes_cni_dirs }}"
  when: check_binary_files is failed

- name: Clean Temporary Container
  shell: "docker rm -f import-kubernetes-temporary"
  ignore_errors: true
---
- name: Check Cluster Status
  shell: 'until {{ kubernetes_ctl_path }}kubectl get pod ; do >&2 echo "Kubenetes Cluster Starting..." && sleep 1 ; done'
  register: result
  ignore_errors: true

- name: Add Kubernetes Apiserver to Kubelet Rbac And Perform.
  copy:
    src: "apiserver-to-kubelet-rbac.yml.conf"
    dest: "{{ temporary_dirs }}apiserver-to-kubelet-rbac.yml"
    owner: "{{ ssh_connect_user }}"
    mode: 0644

- name: Add Apiserver to Kubelet RBAC.
  shell: 'until {{ kubernetes_ctl_path }}kubectl apply -f {{ temporary_dirs }}apiserver-to-kubelet-rbac.yml ; do >&2 echo "Starting..." && sleep 1 ; done'
  ignore_errors: true

- name: Create 3 Byte Secret
  shell: "openssl rand -hex 3"
  register: TOKEN_ID
  changed_when: false

- name: Create 8 Byte Secret
  shell: "openssl rand -hex 8"
  register: TOKEN_SECRET
  changed_when: false

- set_fact:
    bootstrap_token_id: "{{ item[0] }}"
    bootstrap_token_secret: "{{ item[1] }}"
  with_nested:
    - "{{ TOKEN_ID['stdout_lines'] }}"
    - "{{ TOKEN_SECRET['stdout_lines'] }}"

- name: If the old bootstrap-kubelet. Conf file is moved to TMP.
  shell: "mv {{ kubernetes_etc_dirs }}bootstrap-kubelet.conf {{ temporary_dirs }}"
  ignore_errors: true

- shell: "cd {{ kubernetes_pki_dirs }} &&
          {{ kubernetes_ctl_path }}kubectl config set-cluster kubernetes 
            --certificate-authority=ca.pem 
            --embed-certs=true 
            --server={{ k8s_apiserver_https_bind }} 
            --kubeconfig={{ kubernetes_etc_dirs }}bootstrap-kubelet.conf &&
          {{ kubernetes_ctl_path }}kubectl config set-credentials tls-bootstrap-token-user 
            --token={{ bootstrap_token_id }}.{{ bootstrap_token_secret }}
            --kubeconfig={{ kubernetes_etc_dirs }}bootstrap-kubelet.conf && 
          {{ kubernetes_ctl_path }}kubectl config set-context tls-bootstrap-token-user@kubernetes 
            --cluster=kubernetes 
            --user=tls-bootstrap-token-user 
            --kubeconfig={{ kubernetes_etc_dirs }}bootstrap-kubelet.conf && 
          {{ kubernetes_ctl_path }}kubectl config use-context tls-bootstrap-token-user@kubernetes 
            --kubeconfig={{ kubernetes_etc_dirs }}bootstrap-kubelet.conf"

- name: File Empowerment
  shell: "chown {{ ssh_connect_user }} {{ kubernetes_etc_dirs }}bootstrap-kubelet.conf"

- name: Clean Cluster in TLS bootstrap secret.
  shell: "{{ kubernetes_ctl_path }}kubectl delete -f {{ bootstrappers_yaml_path }}"
  ignore_errors: true
  
- name: Create TLS Bootstrap Secret.
  template:
    src: bootstrappers-default-node-token.j2
    dest: "{{ bootstrappers_yaml_path }}"
    owner: "{{ ssh_connect_user }}"
    mode: 0644

- name: Deploy Bootstrap.
  shell: '{{ kubernetes_ctl_path }}kubectl apply -f {{ bootstrappers_yaml_path }}'
  register: result
  ignore_errors: true

- name: Deploy Bootstrap for Error do it Again.
  include_tasks: includes/create-bootstrap.yml
  when: result.stderr

- name: Copy Kubelet Bootstrap RBAC.
  copy: 
    src: kubelet-bootstrap-rbac.yml.conf
    dest: "{{ temporary_dirs }}kubelet-bootstrap-rbac.yml"
    owner: "{{ ssh_connect_user }}"
    mode: 0644

- name: Deploy Bootstrap RBAC
  shell: 'until {{ kubernetes_ctl_path }}kubectl apply -f {{ temporary_dirs }}kubelet-bootstrap-rbac.yml ; do >&2 echo "Starting..." && sleep 1 ; done'

- name: Deploy Kubernetes Certification Files
  include: includes/main.yml
  delegate_to: "{{ groups['kube-master'][0] }}"
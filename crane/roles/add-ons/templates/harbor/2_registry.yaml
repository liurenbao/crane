---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "{{ harbor_project_name_prefix }}harbor-registry"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTPASSWD: "{{ harbor_registry_secret_htpasswd | string | b64encode }}"
  REGISTRY_HTTP_SECRET: "{{ harbor_registry_secret_http_secret | string | b64encode }}"
  REGISTRY_REDIS_PASSWORD: "{{ harbor_registry_secret_redis_password | string | b64encode }}"

---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ harbor_project_name_prefix }}harbor-registry"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: {{ harbor_project_name_prefix }}harbor-redis:6379
      db: 2
      password:
      readtimeout: 10s
      writetimeout: 10s
      dialtimeout: 10s
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
    compatibility:
      schema1:
        enabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
    registry_config: "/etc/registry/config.yml"

---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "{{ harbor_project_name_prefix }}harbor-registry"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: registry
      port: 5000
    - name: controller
      port: 8080
  selector:
    release: release-name
    app: "harbor"
    component: registry

---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ harbor_project_name_prefix }}harbor-registry"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Tiller
        release: release-name
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: 75455e3881dd754519533620b796bfd538678a15acd745534143f570a99219bb
        checksum/secret: 3d90a820ae62822d6e37112c51697e9319e8b5449f5723dfbf2ab19e96624176
        checksum/secret-jobservice: 36145ececce4a2fe7979ce0167f12ab890574f9accf331866c21e73533284d7e
        checksum/secret-core: abaef46ca421802a71f8cd307f208252ac4264b5e817c03b52bcad8aebbc6e6f
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: registry
        image: goharbor/registry-photon:{{ harbor_version }}
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "{{ harbor_project_name_prefix }}harbor-registry"
        env:
        - name: TZ
          value: "{{ time_location }}"
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath:
        - name: registry-root-certificate
          mountPath: /etc/registry/root.crt
          subPath: tls.crt
        - name: registry-htpasswd
          mountPath: /etc/registry/passwd
          subPath: passwd
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - mountPath: /usr/share/zoneinfo
          name: usr-local-timezone
          readOnly: true
      - name: registryctl
        image: goharbor/harbor-registryctl:{{ harbor_version }}
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - secretRef:
            name: "{{ harbor_project_name_prefix }}harbor-registry"
        env:
        - name: TZ
          value: "{{ time_location }}"
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              name: "{{ harbor_project_name_prefix }}harbor-core"
              key: secret
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              name: "{{ harbor_project_name_prefix }}harbor-jobservice"
              key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath:
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
        - mountPath: /usr/share/zoneinfo
          name: usr-local-timezone
          readOnly: true
      volumes:
      - name: usr-local-timezone
        hostPath:
          path: /usr/share/zoneinfo
      - name: registry-htpasswd
        secret:
          secretName: "{{ harbor_project_name_prefix }}harbor-registry"
          items:
            - key: REGISTRY_HTPASSWD
              path: passwd
      - name: registry-root-certificate
        secret:
          secretName: "{{ harbor_project_name_prefix }}harbor-core"
      - name: registry-config
        configMap:
          name: "{{ harbor_project_name_prefix }}harbor-registry"
      - name: registry-data
        emptyDir: {}

---
# Deploy
## ********************************************************************************************************************************
# Check kubernetes image
- name: Check kubernetes image
  shell: 'for i in k8s.gcr.io/kube-proxy:{{ k8s_version }} k8s.gcr.io/kube-apiserver-amd64:{{ k8s_version }} k8s.gcr.io/kube-controller-manager:{{ k8s_version }} k8s.gcr.io/kube-scheduler:{{ k8s_version }} haproxy calico/node:{{ calico_version }} calico/cni:{{ calico_version }} calico/kube-controllers:{{ calico_version }} coredns/coredns:{{ dns_version }} k8s.gcr.io/etcd:{{ etcd_version }} k8s.gcr.io/pause:{{ pause_version }} slzcc/keepalived; do if [ ! `ctr -n k8s.io images ls -q | grep $i | wc -l` -ge 1 ] ;then echo 1 > /dev/stderr && exit 1 ; fi ; done'
  register: check_k8s_image
  ignore_errors: true

- name: Check Binary files
  shell: 'for i in cfssl cfssljson kubelet kubectl; do if [ "`ls {{ kubernetes_ctl_path }}$i | wc -l`" -eq 0 ] ; then echo 1 > /dev/stderr && exit 1; fi ; done'
  register: check_binary_files
  ignore_errors: true

- name: Check Kubectl Version
  shell: "{{ kubernetes_ctl_path }}kubectl version --short=true --client=true | awk '{print $3}'"
  register: check_kubectl_version
  ignore_errors: true

- name: Pull the Image
  shell: "ctr -n k8s.io image pull {{ k8s_image_deploy_repo }}:{{ k8s_version }}.{{ build_k8s_version }}"
  when: (check_kubectl_version.stdout != k8s_version) or (check_k8s_image is failed) or (check_binary_files is failed)

- name: Check is Run import-kubernetes-temporary >
  shell: "ctr -n k8s.io tasks kill --signal 9 import-kubernetes-temporary"
  ignore_errors: true

- name: Check is Run import-kubernetes-temporary >>
  shell: "ctr -n k8s.io tasks rm import-kubernetes-temporary"
  ignore_errors: true

- name: Check is Run import-kubernetes-temporary >>>
  shell: "ctr -n k8s.io c rm import-kubernetes-temporary"
  ignore_errors: true

- name: Run Temportay Containers
  shell: "ctr -n k8s.io run --null-io --net-host -d \
                            --label name=import-kubernetes-temporary \
                            --mount type=bind,src=/var/run,dst=/var/run,options=rbind:ro \
                            --mount type=bind,src=/run,dst=/run,options=rbind:ro \
                            {{ k8s_image_deploy_repo }}:{{ k8s_version }}.{{ build_k8s_version }} import-kubernetes-temporary sleep 1234567"
  when: (check_kubectl_version.stdout != k8s_version) or (check_k8s_image is failed) or (check_binary_files is failed)

- name: Export the Image
  shell: "until ctr -n k8s.io tasks exec --exec-id $(ctr -n k8s.io tasks list | grep 'import-kubernetes-temporary'| awk '{print $2}') import-kubernetes-temporary bash /containerd-image-import.sh ; do >&2 echo 'Starting...' && sleep 1 ; done"
  when: check_k8s_image is failed

- name: Create Temportay Mount Path
  file:
    path: "{{ temporary_dirs }}import-kubernetes-temporary"
    mode: 0755
    owner: "{{ ssh_connect_user }}"
    state: directory

- name: Temportay Mount to.
  shell: "ctr -n k8s.io snapshot mounts {{ temporary_dirs }}import-kubernetes-temporary import-kubernetes-temporary | xargs sudo"
  when: check_k8s_image is failed

- name: Export the cfssl
  shell: "cp -a {{ temporary_dirs }}import-kubernetes-temporary/cfssl {{ kubernetes_ctl_path }}"
  when: check_binary_files is failed

- name: Export the cfssljson
  shell: "cp -a {{ temporary_dirs }}import-kubernetes-temporary/cfssljson {{ kubernetes_ctl_path }}"
  when: check_binary_files is failed

- name: Export the Kubelet
  shell: "cp -a {{ temporary_dirs }}import-kubernetes-temporary/kubernetes/node/bin/kubelet {{ kubernetes_ctl_path }}"
  when: check_kubectl_version.stdout != k8s_version

- name: Export the Kubectl
  shell: "cp -a {{ temporary_dirs }}import-kubernetes-temporary/kubernetes/node/bin/kubectl {{ kubernetes_ctl_path }}"
  when: check_kubectl_version.stdout != k8s_version

- name: Export the CNI
  shell: "cp -a {{ temporary_dirs }}import-kubernetes-temporary/cni {{ kubernetes_cni_dirs }}"
  when: check_binary_files is failed

- name: Temportay uMount to.
  shell: "umount -l {{ temporary_dirs }}import-kubernetes-temporary"
  when: check_k8s_image is failed
  
- name: Clean Temporary Container
  shell: "ctr -n k8s.io tasks kill --signal 9 import-kubernetes-temporary && \
          ctr -n k8s.io tasks rm import-kubernetes-temporary && \
          ctr -n k8s.io c rm import-kubernetes-temporary"
  when: check_k8s_image is failed
  ignore_errors: true